package main

import "os"
import "fmt"
import (
	"mapreduce"
	"sort"
	"strconv"
	"strings"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// Your code here (Part V).
	var countMap = make(map[string]int)
	f := func(c rune) bool {

		return !unicode.IsLetter(c)
	}
	var keyMap = make(map[string]bool)
	slice := strings.FieldsFunc(value, f)
	for _, v := range slice {
		c, ok := countMap[v]
		if ok {
			c++
		} else {
			c = 1
		}
		countMap[v] = c
		keyMap[v] = true
	}
	var keys []string
	for k := range keyMap {
		keys = append(keys, k)
	}
	sortSlice := sort.StringSlice(keys)
	sortSlice.Sort()
	var result []mapreduce.KeyValue
	for _, v := range sortSlice {
		k := string(v)
		kv := mapreduce.KeyValue{Key: k, Value: document}
		result = append(result, kv)
	}
	return result

}

var resultMap map[string]map[string]bool

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// Your code here (Part V).
	old, ok := resultMap[key]
	if !ok {
		old = make(map[string]bool)
	}
	for _, v := range values {
		old[v] = true
	}
	var keys []string
	for k := range old {
		keys = append(keys, k)
	}
	resultMap[key] = old
	slice := sort.StringSlice(keys)
	slice.Sort()
	result := strconv.Itoa(len(keys)) + " "
	if len(slice) == 0 {
		return result
	}
	for index, v := range slice {

		if index == len(slice)-1 {
			result += string(v)
		} else {
			result += string(v) + ","
		}
	}
	return result

}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	resultMap = make(map[string]map[string]bool)

	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
